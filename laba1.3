#include <iostream>
#include <iomanip>
#include <ctime>
#include <cstdlib>
#include <vector>
using namespace std;
void fillMatrix(vector<vector<int>> &matrix, int size);
void drawMatrix(vector<vector<int>> &matrix, int size);
bool CheckOnLocalMax(vector<vector<int>> & matrix, int x, int y, int size);
void localMax(vector<vector<int>> &matrix, int size);
int getMatrixElement(vector<vector<int>> &matrix, int i, int j);
long long product_of_elements(vector<vector<int>> &matrix, int size);
int main()
{
    srand(time(NULL));
    int size;
    cout << "Enter the size of the matrix(from 2 to 10): ";
    cin >> size;
    while (size < 2 || size > 10)
    {
        cout << "You\'ve entered a number that is not in the definition area, "
                "please try again: ";
        cin >> size;
    }
    vector<vector<int>> matrix(size, vector<int>(size));
    fillMatrix(matrix,size);
    drawMatrix(matrix, size);
    localMax(matrix, size);
    cout << "The product of elements under the side diagonal is: " << product_of_elements(matrix, size) << endl;
    return 0;
}
void fillMatrix(vector<vector<int>> &matrix, int size)
{
    char letter;
    cout << "Choose how to fill in the matrix"
            "((o) - on your own/(r) - randomly): ";
    cin >> letter;
    while (letter != 'o' && letter != 'r' )
    {
        cout << "You\'ve entered an incorrect symbol,"
                "please try again: ";
        cin >> letter;
    }
    if (letter == 'r')
    {
        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                matrix[i][j] = rand() % 10;
            }
        }
    }
    if (letter == 'o')
    {
        int count = 1;
        int s = 1;
        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                if (i == j)
                {
                    cout << "Enter the " << count <<  " element of the main diagonal of the matrix: ";
                    cin >> matrix[i][j];
                    count++;
                }
                else
                {
                    if (i > j)
                    {
                        cout << "Enter the " << s << " element of the matrix: ";
                        cin >> matrix[i][j];
                        s++;
                    }
                }
            }

        }
    }
}
void drawMatrix(vector<vector<int>> &matrix, int size)
{
    cout << "Your matrix: " << endl;
    for (int i = 0; i < size; i++)
    {
        cout << "|" << setw(3);
        for (int j = 0; j < size; j++)
        {
            matrix[i][j] = matrix[j][i];
            cout << matrix[i][j] << " ";
        }
        cout << setw(2) << "|" << endl;
    }
}

bool CheckOnLocalMax(vector<vector<int>> & matrix, int x, int y, int size)
{
    if (x == 0)
    {
        if (y == 0)
        {
            if (matrix[x][y] > matrix[x+1][y] && matrix[x][y] > matrix[x][y+1] && matrix[x][y] > matrix[x+1][y+1])
            {
                return true;
            }
        }
        if (y == size-1)
        {
            if (matrix[x][y] > matrix[x+1][y] && matrix[x][y] > matrix[x][y-1] && matrix[x][y] > matrix[x+1][y-1])
            {
                return true;
            }
        }
        if (y != 0 && y != size)
        {
            if (matrix[x][y] > matrix[x][y-1] && matrix[x][y] > matrix[x][y+1] &&
                matrix[x][y] > matrix[x+1][y+1] && matrix[x][y] > matrix[x+1][y] &&
                matrix[x][y] > matrix[x+1][y-1])
            {
                return true;
            }
        }
    }
    if(x == size-1)
    {
        if (y == 0)
        {
            if (matrix[x][y] > matrix[x-1][y] && matrix[x][y] > matrix[x][y+1] && matrix[x][y] > matrix[x-1][y+1])
            {
                return true;
            }
        }
        if (y == size-1)
        {
            if (matrix[x][y] > matrix[x-1][y] && matrix[x][y] > matrix[x][y-1] && matrix[x][y] > matrix[x-1][y-1])
            {
                return true;
            }
        }
        if (y != 0 && y != size)
        {
            if (matrix[x][y] > matrix[x][y-1] && matrix[x][y] > matrix[x][y+1] &&
                matrix[x][y] > matrix[x-1][y+1] && matrix[x][y] > matrix[x-1][y] &&
                    matrix[x][y] > matrix[x-1][y-1])
            {
                return true;
            }
        }
    }
    if (x != 0 && x != size-1 && y != 0 && y != size-1)
    {
        if (matrix[x][y] > matrix[x][y-1] && matrix[x][y] > matrix[x][y+1] &&
            matrix[x][y] > matrix[x-1][y] && matrix[x][y] > matrix[x+1][y]
            && matrix[x][y] > matrix[x-1][y-1] && matrix[x][y] > matrix[x+1][y-1]
            && matrix[x][y] > matrix[x-1][y+1] && matrix[x][y] > matrix[x+1][y+1])
        {
            return true;
        }
    }
    return false;
}
void localMax(vector<vector<int>> &matrix, int size)
{
    int max = matrix[0][0];
    int x = 0, y = 0;
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            if (CheckOnLocalMax(matrix, i, j, size))
            {
                max = matrix[i][j];
                x = i;
                y = j;
            }
        }
    }
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            if (matrix[i][j] > matrix[x][y] && CheckOnLocalMax(matrix, i, j, size))
            {
                max = matrix[i][j];
                x = i;
                y = j;
            }
        }
    }
    if (CheckOnLocalMax(matrix, x, y, size))
    {
        cout << "The largest local max is: " << max << endl;
        cout << "The coordinates of the largest local max are: " << "[ " << x << " , " << y << " ]" << endl;
    }
    else
    {
        cout << "There's no local max in the matrix" << endl;
    }
}
long long product_of_elements(vector<vector<int>> &matrix, int size)
{
    long long product = 1;
    for (int j = 0; j < size; j++)
    {
        for (int i = size - 1; i > size - j - 1; i--)
        {
            product *= getMatrixElement(matrix, i, j);
        }
    }
    return product;
}
int getMatrixElement(vector<vector<int>> &matrix, int i, int j)
{
    if (i < j + 1)
    {
        return matrix[j][i];
    }
    else
    {
        return matrix[i][j];
    }
}
